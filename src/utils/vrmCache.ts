import { MemoryMonitor } from './memoryMonitor';

interface CacheEntry {
  vrm: any;
  lastAccessed: number;
  memoryUsage: number;
  accessCount: number;
}

export class VRMCache {
  private static cache = new Map<string, CacheEntry>();
  private static readonly MAX_CACHE_SIZE = 2; // ÊúÄÂ§ß2„Å§„Åæ„Åß„Ç≠„É£„ÉÉ„Ç∑„É•Ôºà„É°„É¢„É™ÂâäÊ∏õÔºâ
  private static readonly CACHE_EXPIRY_TIME = 2 * 60 * 1000; // 2ÂàÜÔºàÁü≠Á∏ÆÔºâ
  private static readonly MAX_MEMORY_USAGE = 50 * 1024 * 1024; // 50MBÔºàÂâäÊ∏õÔºâ

  /**
   * „Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâVRM„ÇíÂèñÂæó
   */
  static get(path: string): any | null {
    const entry = this.cache.get(path);
    if (!entry) return null;

    // ÊúüÈôêÂàá„Çå„ÉÅ„Çß„ÉÉ„ÇØ
    if (Date.now() - entry.lastAccessed > this.CACHE_EXPIRY_TIME) {
      this.remove(path);
      return null;
    }

    // „Ç¢„ÇØ„Çª„ÇπÊÉÖÂ†±„ÇíÊõ¥Êñ∞
    entry.lastAccessed = Date.now();
    entry.accessCount++;
    
    console.log(`üì¶ VRM„Ç≠„É£„ÉÉ„Ç∑„É•„Éí„ÉÉ„Éà: ${path}`);
    return entry.vrm;
  }

  /**
   * VRM„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò
   */
  static set(path: string, vrm: any): void {
    // „É°„É¢„É™‰ΩøÁî®Èáè„ÇíÊé®ÂÆö
    const memoryUsage = this.estimateVRMMemoryUsage(vrm);
    
    // „É°„É¢„É™Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if (memoryUsage > this.MAX_MEMORY_USAGE) {
      console.warn(`‚ö†Ô∏è VRM„ÅåÂ§ß„Åç„Åô„Åé„Çã„Åü„ÇÅ„Ç≠„É£„ÉÉ„Ç∑„É•„Åó„Åæ„Åõ„Çì: ${path} (${MemoryMonitor.formatMemorySize(memoryUsage)})`);
      return;
    }

    // ÁèæÂú®„ÅÆ„É°„É¢„É™Áä∂Ê≥Å„Çí„ÉÅ„Çß„ÉÉ„ÇØ
    if (MemoryMonitor.isMemoryDangerous()) {
      console.warn('üö® „É°„É¢„É™‰∏çË∂≥„ÅÆ„Åü„ÇÅ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÁÑ°ÂäπÂåñ');
      this.clearAll();
      return;
    }

    // „Ç≠„É£„ÉÉ„Ç∑„É•„Çµ„Ç§„Ç∫Âà∂Èôê„ÉÅ„Çß„ÉÉ„ÇØ
    if (this.cache.size >= this.MAX_CACHE_SIZE) {
      this.evictLeastRecentlyUsed();
    }

    const entry: CacheEntry = {
      vrm,
      lastAccessed: Date.now(),
      memoryUsage,
      accessCount: 1
    };

    this.cache.set(path, entry);
    console.log(`üíæ VRM„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Å´‰øùÂ≠ò: ${path} (${MemoryMonitor.formatMemorySize(memoryUsage)})`);
  }

  /**
   * ÁâπÂÆö„ÅÆVRM„Çí„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂâäÈô§
   */
  static remove(path: string): void {
    const entry = this.cache.get(path);
    if (entry) {
      // VRM„ÅÆ„É°„É¢„É™Ëß£Êîæ
      this.disposeVRM(entry.vrm);
      this.cache.delete(path);
      console.log(`üóëÔ∏è VRM„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂâäÈô§: ${path}`);
    }
  }

  /**
   * ÂÖ®„Ç≠„É£„ÉÉ„Ç∑„É•„Çí„ÇØ„É™„Ç¢
   */
  static clearAll(): void {
    this.cache.forEach((entry, path) => {
      this.disposeVRM(entry.vrm);
    });
    this.cache.clear();
    console.log('üßπ VRM„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂÖ®ÂâäÈô§');
    
    // TextureOptimizer„ÅÆ„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇÇÂÆüË°å
    const textureOptimizer = require('./textureOptimizer');
    textureOptimizer.TextureOptimizer.cleanup();
    
    // Âº∑Âà∂„Ç¨„Éô„Éº„Ç∏„Ç≥„É¨„ÇØ„Ç∑„Éß„É≥
    if (window.gc) {
      window.gc();
    }
  }

  /**
   * ÊúÄ„ÇÇÊúÄËøë‰ΩøÁî®„Åï„Çå„Å¶„ÅÑ„Å™„ÅÑ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂâäÈô§
   */
  private static evictLeastRecentlyUsed(): void {
    let oldestPath = '';
    let oldestTime = Date.now();

    this.cache.forEach((entry, path) => {
      if (entry.lastAccessed < oldestTime) {
        oldestTime = entry.lastAccessed;
        oldestPath = path;
      }
    });

    if (oldestPath) {
      this.remove(oldestPath);
    }
  }

  /**
   * VRM„ÅÆ„É°„É¢„É™‰ΩøÁî®Èáè„ÇíÊé®ÂÆö
   */
  private static estimateVRMMemoryUsage(vrm: any): number {
    let totalMemory = 0;
    
    vrm.scene.traverse((object: any) => {
      // „Ç∏„Ç™„É°„Éà„É™„ÅÆ„É°„É¢„É™‰ΩøÁî®Èáè
      if (object.geometry) {
        const geometry = object.geometry;
        if (geometry.attributes.position) {
          totalMemory += geometry.attributes.position.count * 3 * 4; // position
        }
        if (geometry.attributes.normal) {
          totalMemory += geometry.attributes.normal.count * 3 * 4; // normal
        }
        if (geometry.attributes.uv) {
          totalMemory += geometry.attributes.uv.count * 2 * 4; // uv
        }
        if (geometry.index) {
          totalMemory += geometry.index.count * 4; // index
        }
      }
      
      // „ÉÜ„ÇØ„Çπ„ÉÅ„É£„ÅÆ„É°„É¢„É™‰ΩøÁî®Èáè
      if (object.material) {
        const materials = Array.isArray(object.material) ? object.material : [object.material];
        materials.forEach((material: any) => {
          if (material.map && material.map.image) {
            const img = material.map.image;
            totalMemory += img.width * img.height * 4; // RGBA
          }
        });
      }
    });
    
    return totalMemory;
  }

  /**
   * VRM„ÅÆ„É°„É¢„É™„ÇíËß£Êîæ
   */
  private static disposeVRM(vrm: any): void {
    if (!vrm) return;
    
    vrm.scene.traverse((object: any) => {
      if (object.geometry) {
        object.geometry.dispose();
      }
      if (object.material) {
        if (Array.isArray(object.material)) {
          object.material.forEach((material: any) => {
            if (material.map) material.map.dispose();
            if (material.normalMap) material.normalMap.dispose();
            if (material.emissiveMap) material.emissiveMap.dispose();
            material.dispose();
          });
        } else {
          if (object.material.map) object.material.map.dispose();
          if (object.material.normalMap) object.material.normalMap.dispose();
          if (object.material.emissiveMap) object.material.emissiveMap.dispose();
          object.material.dispose();
        }
      }
    });
    
    if (typeof vrm.dispose === 'function') {
      vrm.dispose();
    }
  }

  /**
   * „Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÁä∂ÊÖã„ÇíÂèñÂæó
   */
  static getStatus(): {
    size: number;
    totalMemory: number;
    entries: Array<{path: string; lastAccessed: number; memoryUsage: number; accessCount: number}>;
  } {
    const entries: Array<{path: string; lastAccessed: number; memoryUsage: number; accessCount: number}> = [];
    let totalMemory = 0;
    
    this.cache.forEach((entry, path) => {
      entries.push({
        path,
        lastAccessed: entry.lastAccessed,
        memoryUsage: entry.memoryUsage,
        accessCount: entry.accessCount
      });
      totalMemory += entry.memoryUsage;
    });
    
    return {
      size: this.cache.size,
      totalMemory,
      entries
    };
  }

  /**
   * „É°„É¢„É™„Éó„É¨„ÉÉ„Ç∑„É£„ÉºÊôÇ„ÅÆÁ∑äÊÄ•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó
   */
  static emergencyCleanup(): void {
    console.warn('üö® VRM„Ç≠„É£„ÉÉ„Ç∑„É•„ÅÆÁ∑äÊÄ•„ÇØ„É™„Éº„É≥„Ç¢„ÉÉ„Éó„ÇíÂÆüË°å');
    
    // ‰ΩøÁî®È†ªÂ∫¶„ÅÆ‰Ωé„ÅÑ„Ç≠„É£„ÉÉ„Ç∑„É•„Åã„ÇâÂâäÈô§
    const entries = Array.from(this.cache.entries())
      .sort(([,a], [,b]) => a.accessCount - b.accessCount);
    
    // ÂçäÂàÜ„ÅÆ„Ç≠„É£„ÉÉ„Ç∑„É•„ÇíÂâäÈô§
    const toDelete = entries.slice(0, Math.ceil(entries.length / 2));
    toDelete.forEach(([path]) => this.remove(path));
  }
}